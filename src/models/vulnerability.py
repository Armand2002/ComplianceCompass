# src/models/vulnerability.py
from sqlalchemy import Column, Integer, String, Text, Enum
from sqlalchemy.orm import relationship
import enum
from src.models.base import Base
from src.models.privacy_pattern import pattern_vulnerability_association

class SeverityLevel(enum.Enum):
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class Vulnerability(Base):
    """
    Modello per le vulnerabilità di privacy.
    
    Memorizza informazioni sulle vulnerabilità che possono essere mitigate dai Privacy Pattern.
    """
    __tablename__ = "vulnerabilities"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(255), unique=True, nullable=False, index=True)
    description = Column(Text, nullable=False)
    severity = Column(Enum(SeverityLevel), default=SeverityLevel.MEDIUM)
    category = Column(String(100), index=True)
    cwe_id = Column(String(20))  # Common Weakness Enumeration ID
    
    # Relazioni
    patterns = relationship("PrivacyPattern", secondary=pattern_vulnerability_association, back_populates="vulnerabilities")
    
    def __repr__(self):
        return f"<Vulnerability(id={self.id}, name='{self.name}', severity={self.severity})>"
    
    def to_dict(self):
        """Converte l'oggetto in un dizionario."""
        return {
            "id": self.id,
            "cwe_id": self.cwe_id,
            "name": self.name,
            "description": self.description,
            "severity": self.severity.value if hasattr(self.severity, "value") else str(self.severity),
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None
        }