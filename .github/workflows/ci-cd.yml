# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit
        
    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=12 --max-line-length=100 --statistics
        
    - name: Check formatting with black
      run: |
        black --check src/ tests/
        
    - name: Check imports with isort
      run: |
        isort --check-only --profile black src/ tests/
        
    - name: Run security checks with bandit
      run: |
        bandit -r src/ -f json -o security-report.json
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.json

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_compliance_compass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      elasticsearch:
        image: elasticsearch:7.17.7
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install coverage
        
    - name: Run unit tests
      run: |
        python -m pytest tests/unit --cov=src --cov-report=xml --cov-report=html --junitxml=unit-test-results.xml
        
    - name: Run integration tests
      run: |
        python -m pytest tests/integration --junitxml=integration-test-results.xml
        
    - name: Upload test coverage report
      uses: actions/upload-artifact@v3
      with:
        name: test-coverage
        path: |
          coverage.xml
          htmlcov/
          
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          unit-test-results.xml
          integration-test-results.xml
          
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          unit-test-results.xml
          integration-test-results.xml
          
    - name: Check code coverage
      run: |
        python -m coverage report --fail-under=80

  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_compliance_compass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      elasticsearch:
        image: elasticsearch:7.17.7
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        
    - name: Run performance tests
      run: |
        python -m pytest tests/performance --run-performance --junitxml=performance-test-results.xml
        
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: performance-test-results.xml
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance_results/

  e2e:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_compliance_compass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      elasticsearch:
        image: elasticsearch:7.17.7
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        
    - name: Run E2E tests
      run: |
        python -m pytest tests/e2e --run-e2e --junitxml=e2e-test-results.xml
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-results
        path: e2e-test-results.xml

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and Push API Image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./docker/Dockerfile.api
        push: true
        tags: |
          compliancecompass/api:latest
          compliancecompass/api:${{ github.sha }}
        cache-from: type=registry,ref=compliancecompass/api:latest
        cache-to: type=inline
        
    - name: Generate deployment package
      run: |
        mkdir -p deployment
        cp docker-compose.yml deployment/
        cp .env.example deployment/.env
        echo "IMAGE_TAG=${{ github.sha }}" >> deployment/.env
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment/

  deploy_dev:
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package
        path: deployment
        
    - name: Deploy to Development
      run: |
        echo "Deploying to development environment..."
        # In un ambiente reale, implementare il deployment usando SSH, Ansible, ecc.
        # Ad esempio:
        # scp -r deployment/ user@dev-server:/path/to/app/
        # ssh user@dev-server "cd /path/to/app && docker-compose up -d"

  deploy_prod:
    runs-on: ubuntu-latest
    needs: [build, performance, e2e]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package
        path: deployment
        
    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        # In un ambiente reale, implementare il deployment usando SSH, Ansible, ecc.
        # Ad esempio:
        # scp -r deployment/ user@prod-server:/path/to/app/
        # ssh user@prod-server "cd /path/to/app && docker-compose -f docker-compose.prod.yml up -d"