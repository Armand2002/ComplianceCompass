name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_compliance_compass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Run unit tests
      run: |
        pytest tests/unit --cov=src --cov-report=xml --cov-report=html --junitxml=test-results.xml
        
    - name: Run integration tests
      run: |
        pytest tests/integration --junitxml=integration-results.xml
        
    - name: Upload test coverage report
      uses: actions/upload-artifact@v3
      with:
        name: test-coverage
        path: |
          coverage.xml
          htmlcov/
          
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          test-results.xml
          integration-results.xml
          
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          test-results.xml
          integration-results.xml
          
    - name: Check code coverage
      run: |
        python -m coverage report --fail-under=80
        
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and Push API Image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./docker/Dockerfile.api
        push: true
        tags: |
          compliancecompass/api:latest
          compliancecompass/api:${{ github.sha }}
        cache-from: type=registry,ref=compliancecompass/api:latest
        cache-to: type=inline
        
    - name: Deploy to Development
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "Deploying to development environment..."
        # Simulazione di deployment
        
    - name: Deploy to Production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production environment..."
        # Simulazione di deployment